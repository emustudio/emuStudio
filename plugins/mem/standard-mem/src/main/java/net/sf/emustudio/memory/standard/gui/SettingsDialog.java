/*
 * KISS, YAGNI, DRY
 *
 * (c) Copyright 2006-2017, Peter Jakubƒço
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
package net.sf.emustudio.memory.standard.gui;

import emulib.emustudio.SettingsManager;
import emulib.runtime.StaticDialogs;
import net.sf.emustudio.memory.standard.gui.model.FileImagesModel;
import net.sf.emustudio.memory.standard.gui.model.ROMmodel;
import net.sf.emustudio.memory.standard.gui.model.TableMemory;
import net.sf.emustudio.memory.standard.impl.MemoryContextImpl;
import net.sf.emustudio.memory.standard.impl.MemoryImpl;
import net.sf.emustudio.memory.standard.impl.RangeTree;

import javax.swing.*;
import java.io.File;
import java.util.Objects;

import static net.sf.emustudio.memory.standard.gui.FileChooser.selectFile;

public class SettingsDialog extends javax.swing.JDialog {
    private final MemoryContextImpl memContext;
    private final MemoryImpl memory;
    private final TableMemory tblMem;
    private final FileImagesModel imagesModel;
    private final ROMmodel romModel;

    public SettingsDialog(JDialog parent, long pluginID,
                          MemoryImpl memory, MemoryContextImpl memContext, TableMemory tblMem,
                          SettingsManager settings) {
        super(parent, true);

        this.memory = Objects.requireNonNull(memory);
        this.memContext = Objects.requireNonNull(memContext);
        this.tblMem = Objects.requireNonNull(tblMem);

        initComponents();
        super.setLocationRelativeTo(parent);

        loadSettings(pluginID, settings);

        imagesModel = new FileImagesModel(settings, pluginID);
        tblImages.setModel(imagesModel);

        this.romModel = new ROMmodel(this.memContext);
        tblROM.setModel(romModel);
    }

    private void loadSettings(long pluginID, SettingsManager settings) {
        // first tab (after start)
        String s = settings.readSetting(pluginID, "banksCount");
        if (s != null) {
            txtBanksCount.setText(s);
        } else {
            txtBanksCount.setText("0");
        }

        s = settings.readSetting(pluginID, "commonBoundary");
        if (s != null) {
            txtCommonBoundary.setText(String.format("0x%04X", Integer.decode(s)));
        } else {
            txtCommonBoundary.setText("0");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        tblROM = new javax.swing.JTable();
        btnAddRange = new javax.swing.JButton();
        btnRemoveRange = new javax.swing.JButton();
        chkApplyROMatStartup = new javax.swing.JCheckBox();
        javax.swing.JPanel jPanel3 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        txtBanksCount = new javax.swing.JTextField();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        txtCommonBoundary = new javax.swing.JTextField();
        javax.swing.JSeparator jSeparator2 = new javax.swing.JSeparator();
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel9 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel10 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblImages = new javax.swing.JTable();
        btnAddImage = new javax.swing.JButton();
        btnRemoveImage = new javax.swing.JButton();
        btnLoadNow = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Memory Settings");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("ROM areas"));

        tblROM.setModel(new javax.swing.table.DefaultTableModel(
            new Object[][]{

            },
            new String[]{
                "From (hex)", "To (hex)"
            }
        ) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        tblROM.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tblROM);

        btnAddRange.setFont(btnAddRange.getFont().deriveFont(btnAddRange.getFont().getStyle() & ~java.awt.Font.BOLD));
        btnAddRange.setText("Add");
        btnAddRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRangeActionPerformed(evt);
            }
        });

        btnRemoveRange.setFont(btnRemoveRange.getFont().deriveFont(btnRemoveRange.getFont().getStyle() & ~java.awt.Font.BOLD));
        btnRemoveRange.setText("Remove");
        btnRemoveRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveRangeActionPerformed(evt);
            }
        });

        chkApplyROMatStartup.setFont(chkApplyROMatStartup.getFont().deriveFont(chkApplyROMatStartup.getFont().getStyle() & ~java.awt.Font.BOLD));
        chkApplyROMatStartup.setText("Apply at startup");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(chkApplyROMatStartup)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(btnRemoveRange)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnAddRange))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAddRange)
                        .addComponent(btnRemoveRange))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chkApplyROMatStartup)
                    .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Bank-switching"));

        jLabel6.setFont(jLabel6.getFont().deriveFont(jLabel6.getFont().getStyle() & ~java.awt.Font.BOLD));
        jLabel6.setText("Banks count:");

        txtBanksCount.setText("0");

        jLabel7.setFont(jLabel7.getFont().deriveFont(jLabel7.getFont().getStyle() & ~java.awt.Font.BOLD));
        jLabel7.setText("Common boundary:");

        txtCommonBoundary.setText("0x0000");

        jLabel8.setFont(jLabel8.getFont().deriveFont(jLabel8.getFont().getStyle() & ~java.awt.Font.BOLD));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("<html>Memory banks are different locations of memory wired in a way they share the addresses. Common area is shared across all banks. ");
        jLabel8.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel9.setFont(jLabel9.getFont().deriveFont(jLabel9.getFont().getStyle() & ~java.awt.Font.BOLD));
        jLabel9.setText("<html>Banks are accessible from <strong>[0..Common]</strong>.");

        jLabel10.setFont(jLabel10.getFont().deriveFont(jLabel10.getFont().getStyle() & ~java.awt.Font.BOLD));
        jLabel10.setText("<html>Common area starts from <strong>[Common..memory end]</strong>.");

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() & ~java.awt.Font.BOLD));
        jLabel1.setText("<html><strong>NOTE:</strong> Changes will be visible after restart.");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel7))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtBanksCount)
                                        .addComponent(txtCommonBoundary))))
                            .addContainerGap())
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(txtBanksCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(txtCommonBoundary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Files to load at startup"));

        tblImages.setModel(new javax.swing.table.DefaultTableModel(
            new Object[][]{

            },
            new String[]{
                "File name", "Load address (hex)"
            }
        ) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        tblImages.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(tblImages);

        btnAddImage.setFont(btnAddImage.getFont().deriveFont(btnAddImage.getFont().getStyle() & ~java.awt.Font.BOLD));
        btnAddImage.setText("Add");
        btnAddImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddImageActionPerformed(evt);
            }
        });

        btnRemoveImage.setFont(btnRemoveImage.getFont().deriveFont(btnRemoveImage.getFont().getStyle() & ~java.awt.Font.BOLD));
        btnRemoveImage.setText("Remove");
        btnRemoveImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveImageActionPerformed(evt);
            }
        });

        btnLoadNow.setFont(btnLoadNow.getFont().deriveFont(btnLoadNow.getFont().getStyle() & ~java.awt.Font.BOLD));
        btnLoadNow.setText("Load now");
        btnLoadNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadNowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnLoadNow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemoveImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(btnAddImage)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnRemoveImage)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnLoadNow))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnOK)
                    .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRangeActionPerformed
        String from = JOptionPane.showInputDialog("Please enter FROM address", "0");
        String to = JOptionPane.showInputDialog("Please enter TO address", "0");

        if (from == null || to == null) {
            return;
        }
        try {
            memContext.setROM(new RangeTree.Range(Integer.decode(from), Integer.decode(to)));

            tblROM.revalidate();
            tblROM.repaint();
            tblMem.revalidate();
            tblMem.repaint();
        } catch (NumberFormatException e) {
            StaticDialogs.showErrorMessage("Range (from,to) has to be positive integer ArrayList!");
        }
    }//GEN-LAST:event_btnAddRangeActionPerformed

    private void btnRemoveRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveRangeActionPerformed
        int i = tblROM.getSelectedRow();

        String from;
        String to;
        if (i >= 0) {
            from = (String) romModel.getValueAt(i, 0);
            to = (String) romModel.getValueAt(i, 1);
        } else {
            from = JOptionPane.showInputDialog("Please enter FROM address", "0");
            to = JOptionPane.showInputDialog("Please enter TO address", "0");
        }

        if (from == null || to == null) {
            return;
        }
        try {
            memContext.setRAM(new RangeTree.Range(Integer.decode(from), Integer.decode(to)));

            tblROM.revalidate();
            tblROM.repaint();
            tblMem.revalidate();
            tblMem.repaint();
        } catch (NumberFormatException e) {
            StaticDialogs.showErrorMessage("Range (from,to) has to be positive integer!");
        }
    }//GEN-LAST:event_btnRemoveRangeActionPerformed

    private int getIntegerOrThrow(String name, JTextField textField) {
        try {
            int number = Integer.decode(textField.getText());
            if (number < 0) {
                throw new NumberFormatException();
            }
            return number;
        } catch (NumberFormatException e) {
            StaticDialogs.showErrorMessage(name + " has to be positive integer !");
            throw e;
        }
    }

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        try {
            int bCount = getIntegerOrThrow("Banks count", txtBanksCount);
            int bCommon = getIntegerOrThrow("Common boundary", txtCommonBoundary);
            memory.saveCoreSettings(bCount, bCommon, imagesModel.getImageFullNames(), imagesModel.getImageAddresses());
            if (chkApplyROMatStartup.isSelected()) {
                memory.saveROMRanges();
            }
            dispose();
        } catch (NumberFormatException e) {
            // ignore
        }
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnAddImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddImageActionPerformed
        File fileSource = selectFile(this, "Add an image");
        if (fileSource != null) {
            int address = 0;
            String suffix = fileSource.getName().toLowerCase();

            if (!suffix.endsWith(".hex")) {
                String addressString = JOptionPane.showInputDialog("Enter the load address:", 0);
                try {
                    address = Integer.decode(addressString);
                } catch (NumberFormatException e) {
                    StaticDialogs.showErrorMessage("Could not parse address: " + addressString);
                    return;
                }
            }

            imagesModel.addImage(fileSource, address);
        }
    }//GEN-LAST:event_btnAddImageActionPerformed

    private void btnRemoveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveImageActionPerformed
        int i = tblImages.getSelectedRow();
        if (i == -1) {
            StaticDialogs.showErrorMessage("Memory image has to be selected!");
        } else if (JOptionPane.showConfirmDialog(
            this, "Are you sure to remove selected image from the list?", "Remove image",
            JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION) {

            imagesModel.removeImageAt(i);
        }
    }//GEN-LAST:event_btnRemoveImageActionPerformed

    private void btnLoadNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadNowActionPerformed
        int row = tblImages.getSelectedRow();
        if (row == -1) {
            StaticDialogs.showErrorMessage("Memory image has to be selected!");
        } else {
            memory.loadImage(imagesModel.getFileNameAtRow(row), imagesModel.getImageAddressAtRow(row));
        }
        tblMem.getMemModel().fireTableDataChanged();
    }//GEN-LAST:event_btnLoadNowActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddImage;
    private javax.swing.JButton btnAddRange;
    private javax.swing.JButton btnLoadNow;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnRemoveImage;
    private javax.swing.JButton btnRemoveRange;
    private javax.swing.JCheckBox chkApplyROMatStartup;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblImages;
    private javax.swing.JTable tblROM;
    private javax.swing.JTextField txtBanksCount;
    private javax.swing.JTextField txtCommonBoundary;
    // End of variables declaration//GEN-END:variables
}
