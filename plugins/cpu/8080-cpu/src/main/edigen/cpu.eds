/*
 * This file is part of emuStudio.
 *
 * Copyright (C) 2006-2022  Peter Jakubƒço
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

root instruction;

# inspired by http://www.z80.info/decoding.htm
# converted using https://pastraiser.com/cpu/i8080/i8080_opcodes.html and https://clrhome.org/table/
instruction =
  "nop":         00 000 000                       |  # x=0, y=0, z=0  
  "lxi %s, %X":  00 rp(2) 0 001 imm16             |  # x=0, p=rp, q=0, z=1  
  "dad %s":      00 rp(2) 1 001                   |  # x=0, p=rp, q=1, z=1  
  "stax b":      00 000 010                       |  # x=0, p=0, q=0, z=2  
  "stax d":      00 010 010                       |  # x=0, p=1, q=0, z=2  
  "shld %X":     00 100 010 ref16                 |  # x=0, p=2, q=0, z=2  
  "sta %X":      00 110 010 ref16                 |  # x=0, p=3, q=0, z=2  
  "ldax b":      00 001 010                       |  # x=0, p=0, q=1, z=2  
  "ldax d":      00 011 010                       |  # x=0, p=1, q=1, z=2  
  "lhld %X":     00 101 010 ref16                 |  # x=0, p=2, q=1, z=2  
  "lda %X":      00 111 010 ref16                 |  # x=0, p=3, q=1, z=2  
  "inx %s":      00 rp(2) 0 011                   |  # x=0, p=rp, q=0, z=3  
  "dcx %s":      00 rp(2) 1 011                   |  # x=0, p=rp, q=1, z=3  
  "inr %s":      00 r(3) 100                      |  # x=0, y=r, z=4  
  "dcr %s":      00 r(3) 101                      |  # x=0, y=r, z=5  
  "mvi %s, %X":  00 r(3) 110 imm8                 |  # x=0, y=r, z=6  
  "rlc":         00 000 111                       |  # x=0, y=0, z=7  
  "rrc":         00 001 111                       |  # x=0, y=1, z=7  
  "ral":         00 010 111                       |  # x=0, y=2, z=7  
  "rar":         00 011 111                       |  # x=0, y=3, z=7  
  "daa":         00 100 111                       |  # x=0, y=4, z=7  
  "cma":         00 101 111                       |  # x=0, y=5, z=7  
  "stc":         00 110 111                       |  # x=0, y=6, z=7  
  "cmc":         00 111 111                       |  # x=0, y=7, z=7  

  "hlt":         01 110 110                       |  # x=1, y=6, z=6  
  "mov %s, %s":  01 0 r_bcde(2) r(3)              |  # x=1, y=0 r_bcde, z=r  
  "mov %s, %s":  01 10 r_h_l(1) r(3)              |  # x=1, y=10 r_h_l, z=r  
  "mov a, %s":   01 111 r(3)                      |  # x=1, y=7, z=r  
  "mov m, %s":   01 110 0 r_bcde(2)               |  # x=1, y=6, z=0 r_bcde  
  "mov m, %s":   01 110 10 r_h_l(1)               |  # x=1, y=6, z=10 r_h_l  
  "mov m, a":    01 110 111                       |  # x=1, y=6, z=7  

  "%s %s":       10 alu(3) r(3)                   |  # x=2, y=alu, z=r  

  "rnz":         11 000 000                       |  # x=3, y=0, z=0  
  "rz":          11 001 000                       |  # x=3, y=1, z=0  
  "rnc":         11 010 000                       |  # x=3, y=2, z=0  
  "rc":          11 011 000                       |  # x=3, y=3, z=0  
  "rpo":         11 100 000                       |  # x=3, y=4, z=0  
  "rpe":         11 101 000                       |  # x=3, y=5, z=0  
  "rp":          11 110 000                       |  # x=3, y=6, z=0  
  "rm":          11 111 000                       |  # x=3, y=7, z=0  

  "pop %s":      11 rp2(2) 0 001                  |  # x=3, p=rp2, q=0, z=1  
  "ret":         11 001 001                       |  # x=3, p=0, q=1, z=1  
  "pchl":        11 101 001                       |  # x=3, p=2, q=1, z=1  
  "sphl":        11 111 001                       |  # x=3, p=3, q=1, z=1  

  "jnz %X":      11 000 010 imm16                 |  # x=3, y=0, z=2  
  "jz %X":       11 001 010 imm16                 |  # x=3, y=1, z=2  
  "jnc %X":      11 010 010 imm16                 |  # x=3, y=2, z=2  
  "jc %X":       11 011 010 imm16                 |  # x=3, y=3, z=2  
  "jpo %X":      11 100 010 imm16                 |  # x=3, y=4, z=2  
  "jpe %X":      11 101 010 imm16                 |  # x=3, y=5, z=2  
  "jp %X":       11 110 010 imm16                 |  # x=3, y=6, z=2  
  "jm %X":       11 111 010 imm16                 |  # x=3, y=7, z=2  

  "jmp %X":      11 000 011 imm16                 |  # x=3, y=0, z=3  

  "out %X":      11 010 011 ref8                  |  # x=3, y=2, z=3  
  "in %X":       11 011 011 ref8                  |  # x=3, y=3, z=3  
  "xthl":        11 100 011                       |  # x=3, y=4, z=3    
  "xchg":        11 101 011                       |  # x=3, y=5, z=3    
  "di":          11 110 011                       |  # x=3, y=6, z=3  
  "ei":          11 111 011                       |  # x=3, y=7, z=3  

  "cnz %X":      11 000 100 imm16                 |  # x=3, y=0, z=4  
  "cz %X":       11 001 100 imm16                 |  # x=3, y=1, z=4  
  "cnc %X":      11 010 100 imm16                 |  # x=3, y=2, z=4  
  "cc %X":       11 011 100 imm16                 |  # x=3, y=3, z=4  
  "cpo %X":      11 100 100 imm16                 |  # x=3, y=4, z=4  
  "cpe %X":      11 101 100 imm16                 |  # x=3, y=5, z=4  
  "cp %X":       11 110 100 imm16                 |  # x=3, y=6, z=4  
  "cm %X":       11 111 100 imm16                 |  # x=3, y=7, z=4  

  "push %s":     11 rp2(2) 0 101                  |  # x=3, p=rp2, q=0, z=5  
  "call %X":     11 001 101 imm16                 |  # x=3, p=0, q=1, z=5  

  "%s %X":       11 alui(3) 110 imm8              |  # x=3, y=alu, z=6  
  "rst %X":      11 rst(3) 111                    ;  # x=3, y=rst, z=7  


alu =
  "add": 000 |
  "adc": 001 |
  "sub": 010 |
  "sbb": 011 |
  "ana": 100 |
  "xra": 101 |
  "ora": 110 |
  "cmp": 111 ;

alui =
  "adi": 000 |
  "aci": 001 |
  "sui": 010 |
  "sbi": 011 |
  "ani": 100 |
  "xri": 101 |
  "ori": 110 |
  "cpi": 111 ;

rp =
  "b": 00 |
  "d": 01 |
  "h": 10 |
  "sp": 11 ;

rp2 =
  "b": 00 |
  "d": 01 |
  "h": 10 |
  "psw": 11 ;

r =
  "b":    000 |
  "c":    001 |
  "d":    010 |
  "e":    011 |
  "h":    100 |
  "l":    101 |
  "m":    110 |
  "a":    111 ;

r_bcde =
  "b":    00 |
  "c":    01 |
  "d":    10 |
  "e":    11 ;

r_h_l =
  "h":    0 |
  "l":    1 ;

imm8,ref8 = imm8: imm8(8);
imm16,ref16 = imm16: imm16(16);
rst = rst: rst(3);

%%

"%s" = instruction rp imm16(reverse_bytes);
"%s" = instruction r_bcde r;
"%s" = instruction r_h_l r;
"%s" = instruction r imm8;
"%s" = instruction alu r;
"%s" = instruction alui imm8;
"%s" = instruction r_bcde;
"%s" = instruction r_h_l;
"%s" = instruction ref8;
"%s" = instruction imm16(reverse_bytes);
"%s" = instruction ref16(reverse_bytes);
"%s" = instruction rp;
"%s" = instruction rp2;
"%s" = instruction r;
"%s" = instruction rst;
"%s" = instruction;
