/*
 * This file is part of emuStudio.
 *
 * Copyright (C) 2006-2020  Peter Jakubƒço
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package net.emustudio.plugins.compiler.ssem;

import java_cup.runtime.ComplexSymbolFactory;
import net.emustudio.emulib.plugins.compiler.CompilerMessage;
import net.emustudio.emulib.plugins.compiler.Token;
import net.emustudio.plugins.compiler.ssem.tree.ASTnode;
import net.emustudio.plugins.compiler.ssem.tree.Constant;
import net.emustudio.plugins.compiler.ssem.tree.Instruction;
import net.emustudio.plugins.compiler.ssem.tree.Program;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

parser code {:
    private CompilerImpl compiler; // cannot be final because cup generates garbage constructors
    private boolean syntaxErrors;

    public ParserImpl(LexerImpl lexer, CompilerImpl compiler) {
        super(lexer, new ComplexSymbolFactory());
        this.compiler = Objects.requireNonNull(compiler);
    }

    public void reset() {
        syntaxErrors = false;
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        done_parsing();
        report_error(message, info);
        throw new Exception("Can't recover from previous error(s)");
    }

    @Override
    public void report_error(String messageText, Object current) {
        syntaxErrors = true;

        Token token = (Token)current;

        messageText += ":" + token.getErrorString() + " ('" + token.getText() + "')";

        List<String> expectedTokenIds = expected_token_ids()
            .stream()
            .map(this::symbl_name_from_id)
            .collect(Collectors.toList());

        if (!expectedTokenIds.isEmpty()) {
            messageText += "\nExpected tokens: " + expectedTokenIds;
        }

        CompilerMessage message = new CompilerMessage(
            CompilerMessage.MessageType.TYPE_ERROR, messageText, token.getLine()+1, token.getColumn()
        );

        compiler.notifyOnMessage(message);
    }

    public boolean hasSyntaxErrors() {
        return syntaxErrors;
    }

:};

terminal JMP, JPR, LDN, STO, SUB, CMP, STP, NUM, BNUM;
terminal SEPARATOR_EOL, TCOMMENT;
terminal Integer NUMBER;
terminal START;

non terminal Program Program;
non terminal ASTnode Statement;
non terminal Instruction Instruction;
non terminal Constant Constant;
non terminal Comment;

start with Program;

Program ::= NUMBER:c Statement:s Program:p              {: if (s != null) p.statement(c, s); RESULT = p;  :}
    | NUMBER:c Comment SEPARATOR_EOL Program:p          {: RESULT = p; :}
    | Comment SEPARATOR_EOL Program:p                   {: RESULT = p; :}
    | START SEPARATOR_EOL Program:p                     {: p.nextLineStarts(); RESULT = p; :}
    | /* empty program */                               {: RESULT = new Program(); :}
    ;

Statement ::= Instruction:i Comment SEPARATOR_EOL       {: RESULT = i; :}
    | Constant:c Comment SEPARATOR_EOL                  {: RESULT = c; :}
    ;

Instruction ::= JMP NUMBER:line             {: RESULT = Instruction.jmp(line); :}
    | JPR NUMBER:line                       {: RESULT = Instruction.jrp(line); :}
    | LDN NUMBER:line                       {: RESULT = Instruction.ldn(line); :}
    | STO NUMBER:line                       {: RESULT = Instruction.sto(line); :}
    | SUB NUMBER:line                       {: RESULT = Instruction.sub(line); :}
    | CMP                                   {: RESULT = Instruction.cmp(); :}
    | STP                                   {: RESULT = Instruction.stp(); :}
    | error
    ;

Constant ::= NUM NUMBER:raw                 {: RESULT = new Constant(raw); :}
    | BNUM NUMBER:raw                       {: RESULT = new Constant(raw); :}
    ;

Comment ::= TCOMMENT
    | /* no comment*/
    ;

