/*
 * This file is part of emuStudio.
 *
 * Copyright (C) 2006-2020  Peter Jakubƒço
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package net.emustudio.plugins.compiler.as8080;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;
import net.emustudio.emulib.plugins.compiler.CompilerMessage;
import net.emustudio.emulib.plugins.compiler.Token;
import net.emustudio.plugins.compiler.as8080.tree.*;
import net.emustudio.plugins.compiler.as8080.treeAbstract.*;

import java.util.List;
import java.util.Objects;
import java.util.Vector;
import java.util.stream.Collectors;


init with {: lastLine = 0; lastColumn = 0; :}
scan with {:
    Token t = (Token)this.getScanner().next_token();
    this.lastLine = t.getLine()+1;
    this.lastColumn = t.getColumn()+1;
    return (Symbol)t;
 :}
parser code {:
    private CompilerImpl compiler; // cannot be final because cup generates garbage constructors
    private boolean syntaxErrors;
    private int lastLine;
    private int lastColumn;
    private String reportPrefixString;

    public ParserImpl(LexerImpl lexer, CompilerImpl compiler) {
        super(lexer, new ComplexSymbolFactory());
        this.compiler = Objects.requireNonNull(compiler);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        done_parsing();
        report_error(message, info);
        throw new Exception("Can't recover from previous error(s)");
    }

    @Override
    public void report_error(String messageText, Object current) {
        syntaxErrors = true;

        Token token = (Token)current;

        if (reportPrefixString != null) {
            messageText = reportPrefixString + messageText + ":" + token.getErrorString() + " ('" + token.getText() + "')";
        } else {
            messageText += ":" + token.getErrorString() + " ('" + token.getText() + "')";
        }

        List<String> expectedTokenIds = expected_token_ids()
            .stream()
            .map(this::symbl_name_from_id)
            .collect(Collectors.toList());

        if (!expectedTokenIds.isEmpty()) {
            messageText += "\nExpected tokens: " + expectedTokenIds;
        }

        CompilerMessage message = new CompilerMessage(
            CompilerMessage.MessageType.TYPE_ERROR, messageText, token.getLine()+1, token.getColumn()
        );

        compiler.notifyOnMessage(message);
    }

    public boolean hasSyntaxErrors() {
        return syntaxErrors;
    }

    public void setReportPrefixString(String str) {
            this.reportPrefixString = str;
    }
:}

terminal RESERVED_STC,RESERVED_CMC,RESERVED_INR,RESERVED_DCR,RESERVED_CMA,
        RESERVED_DAA,RESERVED_NOP,RESERVED_MOV,RESERVED_STAX,RESERVED_LDAX,
        RESERVED_ADD,RESERVED_ADC,RESERVED_SUB,RESERVED_SBB,RESERVED_ANA,
        RESERVED_XRA,RESERVED_ORA,RESERVED_CMP,RESERVED_RLC,RESERVED_RRC,
        RESERVED_RAL,RESERVED_RAR,RESERVED_PUSH,RESERVED_POP,RESERVED_DAD,
        RESERVED_INX,RESERVED_DCX,RESERVED_XCHG,RESERVED_XTHL,RESERVED_SPHL,
        RESERVED_LXI,RESERVED_MVI,RESERVED_ADI,RESERVED_ACI,RESERVED_SUI,
        RESERVED_SBI,RESERVED_ANI,RESERVED_XRI,RESERVED_ORI,RESERVED_CPI,
        RESERVED_STA,RESERVED_LDA,RESERVED_SHLD,RESERVED_LHLD,RESERVED_PCHL,
        RESERVED_JMP,RESERVED_JC,RESERVED_JNC,RESERVED_JZ,RESERVED_JNZ,
        RESERVED_JP,RESERVED_JM,RESERVED_JPE,RESERVED_JPO,RESERVED_CALL,
        RESERVED_CC,RESERVED_CNC,RESERVED_CZ,RESERVED_CNZ,RESERVED_CP,
        RESERVED_CM,RESERVED_CPE,RESERVED_CPO,RESERVED_RET,RESERVED_RC,
        RESERVED_RNC,RESERVED_RZ,RESERVED_RNZ,RESERVED_RM,RESERVED_RP,
        RESERVED_RPE,RESERVED_RPO,RESERVED_RST,RESERVED_EI,RESERVED_DI,
        RESERVED_IN,RESERVED_OUT,RESERVED_HLT;
terminal PREPROCESSOR_ORG,PREPROCESSOR_EQU,PREPROCESSOR_SET,PREPROCESSOR_INCLUDE,
        PREPROCESSOR_IF,PREPROCESSOR_ENDIF,PREPROCESSOR_MACRO,PREPROCESSOR_ENDM,
        PREPROCESSOR_DB,PREPROCESSOR_DW,PREPROCESSOR_DS,PREPROCESSOR_ADDR;
terminal REGISTERS_A,REGISTERS_B,REGISTERS_C,REGISTERS_D,REGISTERS_E,
        REGISTERS_H,REGISTERS_L,REGISTERS_M,REGISTERS_PSW,REGISTERS_SP;
terminal SEPARATOR_LPAR,SEPARATOR_RPAR,SEPARATOR_COMMA,SEPARATOR_EOL;
terminal OPERATOR_ADD,OPERATOR_SUBTRACT,OPERATOR_MULTIPLY,OPERATOR_DIVIDE,
        OPERATOR_EQUAL,OPERATOR_MOD,OPERATOR_SHR,OPERATOR_SHL,OPERATOR_NOT,
        OPERATOR_AND,OPERATOR_OR,OPERATOR_XOR;
terminal Integer LITERAL_DECIMAL_8BIT,LITERAL_DECIMAL_16BIT;
terminal String LITERAL_STRING,TLABEL,TIDENTIFIER;
terminal TCOMMENT;

non terminal Statement Statement;
non terminal InstructionNode Instruction;
non terminal LabelNode LabelOptional;
non terminal CodePseudoNode CodePseudocode;
non terminal CodeNode Code;
non terminal PseudoNode Pseudocode;
non terminal DataNode Data,DBDataList,DWDataList;
non terminal DBDataNode DB_Data;
non terminal DWDataNode DW_Data;
non terminal OpCodeNode Opcode;
non terminal ExprNode Expression;
non terminal Vector MacroOperOptional,MOperList,MacroExprOptional,MExprList;
non terminal Byte Reg,RegPairBD,RegPairBDHP,RegPairBDHS;
non terminal CommentOptional;

precedence left OPERATOR_OR,OPERATOR_XOR;
precedence left OPERATOR_AND;
precedence left OPERATOR_NOT;
precedence nonassoc OPERATOR_EQUAL;
precedence left OPERATOR_ADD,OPERATOR_SUBTRACT;
precedence left OPERATOR_MULTIPLY,OPERATOR_DIVIDE,OPERATOR_MOD,OPERATOR_SHL,
                OPERATOR_SHR;

start with Statement;

Statement ::= Instruction:instr
    {: 
       Statement stmt = new Statement();
       if (instr != null) stmt.addElement(instr);
       RESULT = stmt;
    :}
 | Statement:stmt SEPARATOR_EOL Instruction:instr
    {: if (instr != null) stmt.addElement(instr); RESULT = stmt; :}
 | Statement:stmt error {: parser.syntaxErrors = true; RESULT = stmt; :};

Instruction ::= LabelOptional:label CodePseudocode:codepseudo CommentOptional
    {: if (label == null && codepseudo == null) RESULT = null;
       else RESULT = new InstructionNode(label,codepseudo); :};

LabelOptional ::= TLABEL:name {: RESULT = new LabelNode(name,parser.lastLine,parser.lastColumn); :}
 | {: RESULT = null; :};
CommentOptional ::= TCOMMENT | ;
CodePseudocode ::= Code:code {: RESULT = code; :}
 | Pseudocode:pseudo {: RESULT = pseudo; :}
 | {: RESULT = null; :};

Code ::= Data:data {: RESULT = data; :} | Opcode:code {: RESULT = code; :};

Data ::= PREPROCESSOR_DB DBDataList:db {: RESULT = db; :}
 | PREPROCESSOR_DW DWDataList:dw {: RESULT = dw; :}
 | PREPROCESSOR_DS Expression:expr
    {: DataNode dn = new DataNode(parser.lastLine,parser.lastColumn);
       dn.addElement(new DSDataNode(expr,parser.lastLine,parser.lastColumn));
       RESULT= dn; :};

DBDataList ::= DB_Data:dbdata
    {: DataNode dn = new DataNode(parser.lastLine,parser.lastColumn);
       dn.addElement(dbdata);
       RESULT = dn; :}
 | DBDataList:dn SEPARATOR_COMMA DB_Data:dbdata
    {: dn.addElement(dbdata); RESULT = dn; :};

DWDataList ::= DW_Data:dwdata
    {: DataNode dn = new DataNode(parser.lastLine,parser.lastColumn);
       dn.addElement(dwdata);
       RESULT = dn; :}
 | DWDataList:dn SEPARATOR_COMMA DW_Data:dwdata
    {: dn.addElement(dwdata); RESULT = dn; :};

DB_Data ::= Expression:expr {: RESULT = new DBDataNode(expr,parser.lastLine,parser.lastColumn);:}
 | LITERAL_STRING:str {: RESULT = new DBDataNode(str,parser.lastLine,parser.lastColumn); :}
 | Opcode:opcode {: RESULT = new DBDataNode(opcode,parser.lastLine,parser.lastColumn);:};
DW_Data ::= Expression:expr {: RESULT = new DWDataNode(expr,parser.lastLine,parser.lastColumn);:};

Expression ::= SEPARATOR_LPAR Expression:e SEPARATOR_RPAR {: RESULT = e; :}
 | LITERAL_DECIMAL_8BIT:num8 {: RESULT = new DecimalValueNode(num8); :}
 | LITERAL_DECIMAL_16BIT:num16 {:RESULT = new DecimalValueNode(num16); :}
 | PREPROCESSOR_ADDR {: RESULT = new AddressValueNode(); :}
 | TIDENTIFIER:name {: RESULT = new IdExpr(name); :}
 | Expression:e1 OPERATOR_OR Expression:e2 {: RESULT = new ArithNode(e1,e2,"or"); :}
 | Expression:e1 OPERATOR_XOR Expression:e2 {: RESULT = new ArithNode(e1,e2,"xor"); :}
 | Expression:e1 OPERATOR_AND Expression:e2 {: RESULT = new ArithNode(e1,e2,"and"); :}
 | OPERATOR_NOT Expression:e {: RESULT = new ArithNode(e,null,"not"); :}
 | Expression:e1 OPERATOR_EQUAL Expression:e2 {: RESULT = new ArithNode(e1,e2,"="); :}
 | Expression:e1 OPERATOR_ADD Expression:e2 {: RESULT = new ArithNode(e1,e2,"+"); :}
 | OPERATOR_ADD Expression:e1 {: RESULT = new ArithNode(new DecimalValueNode(0),e1,"+"); :}
 | Expression:e1 OPERATOR_SUBTRACT Expression:e2 {: RESULT = new ArithNode(e1,e2,"-"); :}
 | OPERATOR_SUBTRACT Expression:e1 {: RESULT = new ArithNode(new DecimalValueNode(0),e1,"-"); :}
 | Expression:e1 OPERATOR_MULTIPLY Expression:e2 {: RESULT = new ArithNode(e1,e2,"*"); :}
 | Expression:e1 OPERATOR_DIVIDE Expression:e2 {: RESULT = new ArithNode(e1,e2,"/"); :}
 | Expression:e1 OPERATOR_MOD Expression:e2 {: RESULT = new ArithNode(e1,e2,"mod"); :}
 | Expression:e1 OPERATOR_SHR Expression:e2 {: RESULT = new ArithNode(e1,e2,"shr"); :}
 | Expression:e1 OPERATOR_SHL Expression:e2 {: RESULT = new ArithNode(e1,e2,"shl"); :};

Pseudocode ::= PREPROCESSOR_ORG Expression:e
    {: RESULT = new OrgPseudoNode(e,parser.lastLine, parser.lastColumn); :}
 | TIDENTIFIER:name PREPROCESSOR_EQU Expression:e
    {: RESULT = new EquPseudoNode(name,e,parser.lastLine, parser.lastColumn); :}
 | TIDENTIFIER:name PREPROCESSOR_SET Expression:e
    {: RESULT = new SetPseudoNode(name,e,parser.lastLine, parser.lastColumn); :}
 | PREPROCESSOR_IF Expression:e CommentOptional SEPARATOR_EOL Statement:s
    SEPARATOR_EOL PREPROCESSOR_ENDIF
    {: RESULT = new IfPseudoNode(e,s,parser.lastLine, parser.lastColumn); :}
 | TIDENTIFIER:name PREPROCESSOR_MACRO MacroOperOptional:vec CommentOptional SEPARATOR_EOL
 Statement:s PREPROCESSOR_ENDM
    {: RESULT = new MacroPseudoNode(name,vec,s,parser.lastLine, parser.lastColumn); :}
 | TIDENTIFIER:name MacroExprOptional:vec
    {: RESULT = new MacroCallPseudo(name, vec,parser.lastLine, parser.lastColumn); :}
 | PREPROCESSOR_INCLUDE LITERAL_STRING:filename
    {: RESULT = new IncludePseudoNode(filename,parser.lastLine,parser.lastColumn,parser.compiler); :};

MacroOperOptional ::= MOperList:vec {: RESULT = vec; :} | {: RESULT = null; :};
MOperList ::= TIDENTIFIER:name
    {: Vector vec = new Vector();
       vec.addElement(name);
       RESULT = vec; :}
 | MOperList:vec SEPARATOR_COMMA TIDENTIFIER:name
    {: vec.addElement(name); RESULT = vec; :};

MacroExprOptional ::= MExprList:vec {: RESULT = vec; :} | {: RESULT = null; :};
MExprList ::= Expression:expr
    {: Vector vec = new Vector();
       vec.addElement(expr);
       RESULT = vec; :}
 | MExprList:vec SEPARATOR_COMMA Expression:expr
    {: vec.addElement(expr); RESULT = vec; :};

Opcode ::= RESERVED_STC {: RESULT = new OC_NoParams("stc",parser.lastLine, parser.lastColumn); :}
 | RESERVED_CMC {: RESULT = new OC_NoParams("cmc",parser.lastLine, parser.lastColumn); :}
 | RESERVED_CMA {: RESULT = new OC_NoParams("cma",parser.lastLine, parser.lastColumn); :}
 | RESERVED_DAA {: RESULT = new OC_NoParams("daa",parser.lastLine, parser.lastColumn); :}
 | RESERVED_NOP {: RESULT = new OC_NoParams("nop",parser.lastLine, parser.lastColumn); :}
 | RESERVED_RLC {: RESULT = new OC_NoParams("rlc",parser.lastLine, parser.lastColumn); :}
 | RESERVED_RRC {: RESULT = new OC_NoParams("rrc",parser.lastLine, parser.lastColumn); :}
 | RESERVED_RAL {: RESULT = new OC_NoParams("ral",parser.lastLine, parser.lastColumn); :}
 | RESERVED_RAR {: RESULT = new OC_NoParams("rar",parser.lastLine, parser.lastColumn); :}
 | RESERVED_XCHG {: RESULT = new OC_NoParams("xchg",parser.lastLine, parser.lastColumn); :}
 | RESERVED_XTHL {: RESULT = new OC_NoParams("xthl",parser.lastLine, parser.lastColumn); :}
 | RESERVED_SPHL {: RESULT = new OC_NoParams("sphl",parser.lastLine, parser.lastColumn); :}
 | RESERVED_PCHL {: RESULT = new OC_NoParams("pchl",parser.lastLine, parser.lastColumn); :}
 | RESERVED_RET {: RESULT = new OC_NoParams("ret",parser.lastLine, parser.lastColumn); :}
 | RESERVED_RC {: RESULT = new OC_NoParams("rc",parser.lastLine, parser.lastColumn); :}
 | RESERVED_RNC {: RESULT = new OC_NoParams("rnc",parser.lastLine, parser.lastColumn); :}
 | RESERVED_RZ {: RESULT = new OC_NoParams("rz",parser.lastLine, parser.lastColumn); :}
 | RESERVED_RNZ {: RESULT = new OC_NoParams("rnz",parser.lastLine, parser.lastColumn); :}
 | RESERVED_RM {: RESULT = new OC_NoParams("rm",parser.lastLine, parser.lastColumn); :}
 | RESERVED_RP {: RESULT = new OC_NoParams("rp",parser.lastLine, parser.lastColumn); :}
 | RESERVED_RPE {: RESULT = new OC_NoParams("rpe",parser.lastLine, parser.lastColumn); :}
 | RESERVED_RPO {: RESULT = new OC_NoParams("rpo",parser.lastLine, parser.lastColumn); :}
 | RESERVED_EI {: RESULT = new OC_NoParams("ei",parser.lastLine, parser.lastColumn); :}
 | RESERVED_DI {: RESULT = new OC_NoParams("di",parser.lastLine, parser.lastColumn); :}
 | RESERVED_HLT {: RESULT = new OC_NoParams("hlt",parser.lastLine, parser.lastColumn); :}
 | RESERVED_INR Reg:r {: RESULT = new OC_Reg("inr",r,parser.lastLine, parser.lastColumn); :}
 | RESERVED_DCR Reg:r {: RESULT = new OC_Reg("dcr",r,parser.lastLine, parser.lastColumn); :}
 | RESERVED_ADD Reg:r {: RESULT = new OC_Reg("add",r,parser.lastLine, parser.lastColumn); :}
 | RESERVED_ADC Reg:r {: RESULT = new OC_Reg("adc",r,parser.lastLine, parser.lastColumn); :}
 | RESERVED_SUB Reg:r {: RESULT = new OC_Reg("sub",r,parser.lastLine, parser.lastColumn); :}
 | RESERVED_SBB Reg:r {: RESULT = new OC_Reg("sbb",r,parser.lastLine, parser.lastColumn); :}
 | RESERVED_ANA Reg:r {: RESULT = new OC_Reg("ana",r,parser.lastLine, parser.lastColumn); :}
 | RESERVED_XRA Reg:r {: RESULT = new OC_Reg("xra",r,parser.lastLine, parser.lastColumn); :}
 | RESERVED_ORA Reg:r {: RESULT = new OC_Reg("ora",r,parser.lastLine, parser.lastColumn); :}
 | RESERVED_CMP Reg:r {: RESULT = new OC_Reg("cmp",r,parser.lastLine, parser.lastColumn); :}
 | RESERVED_MOV Reg:dst SEPARATOR_COMMA Reg:src
    {: RESULT = new OC_RegReg("mov",dst,src,parser.lastLine, parser.lastColumn); :}
 | RESERVED_STAX RegPairBD:r {: RESULT = new OC_Regpair("stax",r,false,parser.lastLine, parser.lastColumn); :}
 | RESERVED_LDAX RegPairBD:r {: RESULT = new OC_Regpair("ldax",r,false,parser.lastLine, parser.lastColumn); :}
 | RESERVED_PUSH RegPairBDHP:r {: RESULT = new OC_Regpair("push",r,true,parser.lastLine, parser.lastColumn); :}
 | RESERVED_POP RegPairBDHP:r {: RESULT = new OC_Regpair("pop",r,true,parser.lastLine, parser.lastColumn); :}
 | RESERVED_DAD RegPairBDHS:r {: RESULT = new OC_Regpair("dad",r,false,parser.lastLine, parser.lastColumn); :}
 | RESERVED_INX RegPairBDHS:r {: RESULT = new OC_Regpair("inx",r,false,parser.lastLine, parser.lastColumn); :}
 | RESERVED_DCX RegPairBDHS:r {: RESULT = new OC_Regpair("dcx",r,false,parser.lastLine, parser.lastColumn); :}
 | RESERVED_LXI RegPairBDHS:r SEPARATOR_COMMA Expression:e
    {: RESULT = new OC_RegpairExpr("lxi",r,e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_MVI Reg:r SEPARATOR_COMMA Expression:e
    {: RESULT = new OC_RegExpr("mvi",r,e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_ADI Expression:e {: RESULT = new OC_Expr("adi",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_ACI Expression:e {: RESULT = new OC_Expr("aci",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_SUI Expression:e {: RESULT = new OC_Expr("sui",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_SBI Expression:e {: RESULT = new OC_Expr("sbi",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_ANI Expression:e {: RESULT = new OC_Expr("ani",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_XRI Expression:e {: RESULT = new OC_Expr("xri",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_ORI Expression:e {: RESULT = new OC_Expr("ori",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_CPI Expression:e {: RESULT = new OC_Expr("cpi",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_STA Expression:e {: RESULT = new OC_Expr("sta",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_LDA Expression:e {: RESULT = new OC_Expr("lda",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_SHLD Expression:e {: RESULT = new OC_Expr("shld",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_LHLD Expression:e {: RESULT = new OC_Expr("lhld",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_JMP Expression:e {: RESULT = new OC_Expr("jmp",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_JC Expression:e {: RESULT = new OC_Expr("jc",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_JNC Expression:e {: RESULT = new OC_Expr("jnc",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_JZ Expression:e {: RESULT = new OC_Expr("jz",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_JNZ Expression:e {: RESULT = new OC_Expr("jnz",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_JM Expression:e {: RESULT = new OC_Expr("jm",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_JP Expression:e {: RESULT = new OC_Expr("jp",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_JPE Expression:e {: RESULT = new OC_Expr("jpe",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_JPO Expression:e {: RESULT = new OC_Expr("jpo",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_CALL Expression:e {: RESULT = new OC_Expr("call",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_CC Expression:e {: RESULT = new OC_Expr("cc",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_CNC Expression:e {: RESULT = new OC_Expr("cnc",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_CZ Expression:e {: RESULT = new OC_Expr("cz",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_CNZ Expression:e {: RESULT = new OC_Expr("cnz",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_CM Expression:e {: RESULT = new OC_Expr("cm",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_CP Expression:e {: RESULT = new OC_Expr("cp",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_CPE Expression:e {: RESULT = new OC_Expr("cpe",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_CPO Expression:e {: RESULT = new OC_Expr("cpo",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_RST Expression:e {: RESULT = new OC_Expr("rst",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_IN Expression:e {: RESULT = new OC_Expr("in",e,parser.lastLine, parser.lastColumn); :}
 | RESERVED_OUT Expression:e {: RESULT = new OC_Expr("out",e,parser.lastLine, parser.lastColumn); :};
RegPairBD ::= REGISTERS_B {: RESULT = 0; :} | REGISTERS_D {: RESULT = 1; :};
RegPairBDHP ::= REGISTERS_B {: RESULT = 0; :} | REGISTERS_D {: RESULT = 1; :}
 | REGISTERS_H {: RESULT = 2; :} | REGISTERS_PSW {: RESULT = 3; :};
RegPairBDHS ::= REGISTERS_B {: RESULT = 0; :} | REGISTERS_D {: RESULT = 1; :}
 | REGISTERS_H {: RESULT = 2; :} | REGISTERS_SP {: RESULT = 3; :};

Reg ::= REGISTERS_A {: RESULT = 7; :} | REGISTERS_B {: RESULT = 0; :}
 | REGISTERS_C {: RESULT = 1; :} | REGISTERS_D {: RESULT = 2; :}
 | REGISTERS_E {: RESULT = 3; :} | REGISTERS_H {: RESULT = 4; :}
 | REGISTERS_L {: RESULT = 5; :} | REGISTERS_M {: RESULT = 6; :};

