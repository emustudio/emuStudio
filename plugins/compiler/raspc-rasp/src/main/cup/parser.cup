/*
 * This file is part of emuStudio.
 *
 * Copyright (C) 2016-2017  Michal Šipoš
 * Copyright (C) 2020  Peter Jakubčo
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package net.emustudio.plugins.compiler.raspc;

import java_cup.runtime.DefaultSymbolFactory;
import net.emustudio.emulib.plugins.compiler.CompilerMessage;
import net.emustudio.emulib.plugins.compiler.Token;
import net.emustudio.plugins.compiler.raspc.tree.*;
import net.emustudio.plugins.memory.rasp.InstructionImpl;
import net.emustudio.plugins.memory.rasp.api.RASPInstruction;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

parser code{:
   private CompilerImpl compiler;
    private boolean syntaxErrors;

        public ParserImpl(LexerImpl lexer, CompilerImpl compiler) {
            super(lexer, new DefaultSymbolFactory());
            this.compiler = Objects.requireNonNull(compiler);
        }

        @Override
        public void report_fatal_error(String message, Object info) throws Exception {
            done_parsing();
            report_error(message, info);
            throw new Exception("Can't recover from previous error(s)");
        }

        @Override
        public void report_error(String messageText, Object current) {
            syntaxErrors = true;

            Token token = (Token)current;

            messageText += ":" + token.getErrorString() + " ('" + token.getText() + "')";

            List<String> expectedTokenIds = expected_token_ids()
                .stream()
                .map(this::symbl_name_from_id)
                .collect(Collectors.toList());

            if (!expectedTokenIds.isEmpty()) {
                messageText += "\nExpected tokens: " + expectedTokenIds;
            }

            CompilerMessage message = new CompilerMessage(
                CompilerMessage.MessageType.TYPE_ERROR, messageText, token.getLine()+1, token.getColumn()
            );

            compiler.notifyOnMessage(message);
        }

        public boolean hasSyntaxErrors() {
            return syntaxErrors;
        }
:};

terminal READ, WRITE, LOAD, STORE, ADD, SUB, MUL, DIV, JMP, JZ, JGTZ, HALT, ORG, SEPARATOR_EOL, TCOMMENT, OPERATOR_CONSTANT, ERROR_UNKNOWN_TOKEN;
terminal Integer NUMBER;
terminal String TLABEL, IDENT;
terminal TINPUT;

non terminal SourceCode SourceCode;
non terminal Program Program;
non terminal Row Row;
non terminal Label Label;
non terminal Comment;
non terminal Statement Statement;
non terminal InstructionImpl Instruction;
non terminal InstructionImpl JumpInstruction;
non terminal Input Input;


start with SourceCode;

SourceCode ::= ORG NUMBER:programStart Program:p                        {: RESULT = new SourceCode(programStart, p); :}
      |  TINPUT Input:i Program:p                                       {: RESULT = new SourceCode(i,p); :}
      |  TINPUT Input:i ORG NUMBER:programStart Program:p               {: RESULT = new SourceCode(programStart, i, p); :}
      |  Program:p                                                      {: RESULT = new SourceCode(p); :}
      ;

Input ::= Input:i NUMBER:n                                            {: i.addNumber(n); RESULT = i; :}
        | NUMBER:n                                                    {: RESULT = new Input(n); :}
        ;



Program ::= Program:p Row:r                                         {: if(r != null) p.addRow(r); RESULT = p; :}
            | /*empty program*/                                     {: RESULT = new Program(); :}
            ;

Row ::= Label:l Statement:s Comment SEPARATOR_EOL                   {: RESULT = new Row(l,s); :}
      | Label:l Comment SEPARATOR_EOL Statement:s Comment SEPARATOR_EOL     {: RESULT = new Row(l,s); :}
      | Statement:s Comment SEPARATOR_EOL                           {: RESULT = new Row(null,s); :}
      | Comment SEPARATOR_EOL                                       {: RESULT = null; :}
        ;

Label ::= TLABEL:l                                                  {: RESULT = new Label(l); :}
        ;

Statement ::= Instruction:i NUMBER:operand 		{: RESULT = new Statement(i,operand); :}
            | JumpInstruction:i IDENT:label		{: RESULT = new Statement(i,label); :}	
            | HALT					{: RESULT = new Statement(new InstructionImpl(RASPInstruction.HALT), 0); :}
;

Comment ::= TCOMMENT | /*no comment*/;     /*no action - ignore the comment*/

Instruction ::=	READ				{: RESULT = new InstructionImpl(RASPInstruction.READ); :}
              |	WRITE OPERATOR_CONSTANT		{: RESULT = new InstructionImpl(RASPInstruction.WRITE_CONSTANT); :}
              |	WRITE 				{: RESULT = new InstructionImpl(RASPInstruction.WRITE_REGISTER); :}
              | LOAD OPERATOR_CONSTANT		{: RESULT = new InstructionImpl(RASPInstruction.LOAD_CONSTANT); :}
              | LOAD				{: RESULT = new InstructionImpl(RASPInstruction.LOAD_REGISTER); :}
              | STORE				{: RESULT = new InstructionImpl(RASPInstruction.STORE); :}
              | ADD OPERATOR_CONSTANT		{: RESULT = new InstructionImpl(RASPInstruction.ADD_CONSTANT); :}
              | ADD				{: RESULT = new InstructionImpl(RASPInstruction.ADD_REGISTER); :}
              | SUB OPERATOR_CONSTANT		{: RESULT = new InstructionImpl(RASPInstruction.SUB_CONSTANT); :}
              | SUB				{: RESULT = new InstructionImpl(RASPInstruction.SUB_REGISTER); :}
              | MUL OPERATOR_CONSTANT		{: RESULT = new InstructionImpl(RASPInstruction.MUL_CONSTANT); :}
              | MUL				{: RESULT = new InstructionImpl(RASPInstruction.MUL_REGISTER); :}
              | DIV OPERATOR_CONSTANT		{: RESULT = new InstructionImpl(RASPInstruction.DIV_CONSTANT); :}
              | DIV				{: RESULT = new InstructionImpl(RASPInstruction.DIV_REGISTER); :}			
; 

JumpInstruction ::= JMP 			{: RESULT =  new InstructionImpl(RASPInstruction.JMP); :}
		| JZ				{: RESULT =  new InstructionImpl(RASPInstruction.JZ); :}
		| JGTZ                          {: RESULT =  new InstructionImpl(RASPInstruction.JGTZ); :}
;



	

