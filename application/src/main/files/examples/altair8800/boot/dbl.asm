; THE ALTAIR 88-DSK ROM MOVES THIS CODE TO 4C00H THEN
; JUMPS TO IT. POSSIBLE ERRORS ARE:
;    C  CRC ON DISK DOESN'T MATCH CALCULATED CRC
;    M  MEMORY ERROR READ/BACK FROM MEMORY DOESN'T MATCH WRITE TO MEMORY (NO RAM, BAD RAM, OR WPROT)
;    O  OVERFLOW OR OUT OF MEM CAUSED BY TRYING TO LOAD BEYOND FF00 OR BAD "LOAD LIMIT BYTES" ON DISK.

ORG 0FF00h

; RELOCATE $E6 BYTES REMAINING OF LOADER TO 4C00 (19456D)
LXI H, 4C00h
LXI D, here ;0FF18h
MVI C, 0E6h

XFF08:
LDAX D
MOV M,A
INX D
INX H
DCR C
JNZ XFF08
JMP 4C00h

here:
;ORG 4C00h
DI            ; DISABLE INTERRUPTS
LXI  SP,4D62h ; LOAD STACK POINTER
XRA  A        ; ZERO IN A
OUT  08h      ; SELECT DRIVE 0
MVI  A,04h    ; HEAD DOWN CMD
OUT  09h      ; SEND HEAD DOWN
JMP  TTRK0    ; GO TEST FOR TRACK ZERO

TMVOK:
IN 08h        ; GET STATUS
ANI  02h      ; TEST FOR MOVE OK
JNZ  TMVOK    ; JMP MOVE NOT OK
MVI  A,02h    ; STEP OUT CMD
OUT  09h      ; SEND STEP OUT

TTRK0:
IN 08h        ; GET STATUS
ANI  40h      ; TEST FOR TRACK ZERO
JNZ  TMVOK    ; JMP NOT TRACK ZERO
LXI  D,0000   ; DE->0000H

NXTTK:
MVI  B,00     ; B=0

THDDN:
IN   08h      ; GET STATUS
ANI  04h      ; TEST FOR HEAD DOWN
JNZ  THDDN    ; JMP NOT HEAD DOWN

;SEEK TO SECTOR IN B
NXTSEC:
MVI  A,10h    ; A=10H 16D RETRY COUNT

RETRY:
PUSH PSW      ; SAVE RETRY COUNT
PUSH D        ; NXTMEM
PUSH B        ; B=SECTOR
PUSH D        ; NXTMEM
LXI  D,8086h  ; D=80(UNUSED?) E=128=COUNT
LXI  H,VAR1   ; M=POINTER TO INBUFFER

TSECT:
IN   09h      ; GET SECTOR# UNDER HEAD AND STATUS
RAR           ; TEST SECTOR TRUE
JC  TSECT     ; JMP TSECT IF NOT TRUE
ANI  1Fh      ; AND SECTOR MASK 31D
CMP  B        ; DESIRED SECTOR
JNZ  TSECT    ; JMP TSECT IF NOT EQUAL

;READ 134 BYTES TWO AT A TIME INTO INBUFFER
TRDOK:
IN 08h        ; GET STATUS
ORA  A        ; SET FLAGS TEST FOR READ OK
JM   TRDOK    ; JMP TRDOK IF NOT READ OK
IN   0Ah      ; GET DATA BYTE1
MOV  M,A      ; MOVE BYTE TO INBUFF
INX  H        ; BUMP INPOINTER
DCR  E        ; DECREMENT COUNT
JZ   MVBYTS   ; JMP MVBYTS IF DONE
DCR  E        ; DEC COUNT
IN   0Ah      ; GET DATA BYTE2
MOV  M,A      ; MOVE TO INBUFF
INX  H        ; INCREMENT POINTER
JNZ  TRDOK    ; JMP TRDOK IF COUNT IN E IS NOT ZERO

;MOVE 128 DATA BYTES FROM BUFF TO MEMORY MAKE A CRC
MVBYTS:
POP  H        ; HL (M)=0000H FIRST TIME
LXI  D,VAR3   ; DE POINTS TO BUFFER + 3
LXI  B,0080h  ; B=0=CRC C=128 COUNT

MVBYT2:
LDAX D        ; GET BYTE FROM BUFFER
MOV  M,A      ; MOVE TO DESTINATION
CMP  M        ; CHECK FOR MEMORY PROBLEM
JNZ  MERROR   ; JMP MERROR IF PROBLEM
ADD  B        ; MAKE A CRC
MOV  B,A      ; SAVE IN B
INX  D        ; INC SRC
INX  H        ; INC DEST
DCR  C        ; DEC COUNT
JNZ  MVBYT2   ; JMP MVBYT2 UNTIL COUNT = 0

;CHECK CRC
LDAX D        ; DE POINTS TO BUFFER + 131
CPI  0FFh     ; COMPARE THAT BYTE TO 255
JNZ  FFERR    ; JMP FFERR IF NOT EQUAL
INX  D        ; INC DE POINTS TO BUFF+132
LDAX D        ; GET THAT BYTE
CMP  B        ; COMPARE TO CRC

FFERR:
POP  B        ; B=SECTOR
XCHG          ; DE->NEXT DEST   HL->BUFF+132
JNZ  CRCERR   ; CRC ERROR GO CRCERR

;CHECK FOR OUT OF MEMORY  CHECK DONE LOADING
POP  PSW      ; 0000H FIRST TIME
POP  PSW      ; ACC=16
LHLD VAR2     ; L=BUFF+1 H=BUFF+2
PUSH D        ; SAVE NEXT DEST  0080 FIRST TIME
LXI  D,0FF00h ; DE->BOOTROM(END OF MEMORY)
CALL SUB1     ; COMPARE1 FF00H,HL OUT OF MEMORY (HL GREATER THAN FF00H)
POP  D        ;   NEXT DEST
JC   OERROR   ; JMP 'O'UT OF RAM ERROR (HL GREATER THAN FFOOH)
CALL SUB1     ; COMPARE2 DE,HL ARE WE DONE LOADING?
JNC  EXIT1    ; IF NO CARRY (HL <= NEXT DEST)WE'RE DONE GO EXECUTE

;CALCULATE NEXT SECTOR AND TRACK 
INR  B        ; ADD 2 TO SECTOR#
INR  B        ;
MOV  A,B      ; DESIRED NEXT SECTORA
CPI  20h      ; TEST IF SECTORA LESS THAN 32
JC   NXTSEC   ; IF LESS GO GET IT
MVI  B,01h    ;   IF NOT LESS MAKE DESIRED SECTORB=1
JZ   NXTSEC   ; IF SECTORA EQUALED 32 GO GET SECTORB=1

LOOP7:
IN   08h      ; ELSE GET STATUS
ANI  02h      ; TEST MOVE OK
JNZ  LOOP7    ; UNTIL MOVE IS OK
MVI  A,01h    ; STEP IN CMD
OUT  09h      ; SEND STEP IN CMD
JMP  NXTTK    ; START LOADING FROM NEXT TRACK SECTORB=0

;LOAD THE EVEN SECTORS ON A TRACK FIRST
;THEN THE ODD SECTORS

;DONE
EXIT1:
MVI  A,80h    ;
OUT  08h      ; CLEAR CONTROLLER
JMP  0000h    ; GO

;CRC ERROR RETRY PSW TIMES
CRCERR:
POP  D
POP  PSW      ;
DCR  A        ; DECREMENT RETRY COUNT
JNZ  RETRY    ; IF NOT 0 GO RETRY

;CLEAR CONTROLLER  SEND TO CONSOLE ERROR MESSAGE 
MVI  A,43h    ; ELSE LOAD A WITH CHAR 'C'RC ERROR
DB  01h

;4CBD     LXI  B,4F3E  ;GARBAGE - SKIP TRICK BD-BF
OERROR:
MVI  A,4Fh    ; LOAD A WITH CHAR 'O'VERFLOW
DB  01h

;4CC0   LXI  B,4D3E  ;GARBAGE - SKIP TRICK C0-C2
MERROR:
MVI  A,4D     ; LOAD A WITH CHAR 'M'EMORY ERROR
MOV  B,A      ; SAVE CHAR
MVI  A,80h    ; CLEAR CONTROLLER
OUT  08h      ; SEND CLEAR
MOV  A,B      ; GET CHAR

CONOUT:
OUT  11h      ; SEND ERROR CHAR TO CONSOLE
JMP  CONOUT   ; OVER AND OVER AND OVER...

;TEST FOR OVERFLOW, TEST LOAD LIMIT, COMPARE HL,DE
SUB1:
MOV  A,D      ;
CMP  H        ;
RNZ           ;
MOV  A,E      ;
CMP  L        ;
RET

;BEGINNING OF IN BUFFER  
VAR1:
DB 84h        ; ADD H

VAR2:
DB 0          ; NOP
DB 4Ch        ; MOV C,H

VAR3:
DB 24h        ; INR H
DB 0D6h, 56h  ; SUI $56
DB 16h, 0     ; MVI D,0
NOP           ; DATA TRUNCATED
