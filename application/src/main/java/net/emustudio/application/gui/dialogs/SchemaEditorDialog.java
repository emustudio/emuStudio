/*
 * This file is part of emuStudio.
 *
 * Copyright (C) 2006-2020  Peter Jakubƒço
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package net.emustudio.application.gui.dialogs;

import net.emustudio.application.configuration.ConfigFiles;
import net.emustudio.application.gui.schema.DrawingPanel;
import net.emustudio.application.gui.schema.DrawingPanel.Tool;
import net.emustudio.application.gui.schema.Schema;
import net.emustudio.emulib.plugins.annotations.PLUGIN_TYPE;
import net.emustudio.emulib.runtime.CannotUpdateSettingException;
import net.emustudio.emulib.runtime.interaction.Dialogs;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

import static net.emustudio.application.gui.Components.addKeyListenerRecursively;

// TODO: Allow renaming computer during editing
class SchemaEditorDialog extends javax.swing.JDialog implements KeyListener {
    private final static Logger LOGGER = LoggerFactory.getLogger(SchemaEditorDialog.class);
    private final static PluginComboModel EMPTY_MODEL = new PluginComboModel(Collections.emptyList());

    private final Schema schema;
    private final ConfigFiles configFiles;

    private final Dialogs dialogs;

    private DrawingPanel panel;
    private boolean buttonSelected = false;
    private OpenComputerDialog odialog;

    SchemaEditorDialog(OpenComputerDialog parent, Schema schema, ConfigFiles configFiles, Dialogs dialogs) {
        super(parent, true);

        this.schema = Objects.requireNonNull(schema);
        this.configFiles = Objects.requireNonNull(configFiles);
        this.dialogs = Objects.requireNonNull(dialogs);

        initialize(parent);
        this.setTitle("Computer editor [" + schema.getComputerConfig().getName() + "]");
    }

    public Schema getSchema() {
        return schema;
    }


    /**
     * Perform common initialization used in both constructors.
     */
    private void initialize(OpenComputerDialog odialog) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.odialog = odialog;
        btnUseGrid.setSelected(schema.useSchemaGrid());
        panel = new DrawingPanel(this.schema);
        scrollScheme.setViewportView(panel);
        scrollScheme.getHorizontalScrollBar().setUnitIncrement(10);
        scrollScheme.getVerticalScrollBar().setUnitIncrement(10);
        sliderGridGap.setValue(schema.getSchemaGridGap());
        panel.addMouseListener(panel);
        panel.addMouseMotionListener(panel);
        addKeyListenerRecursively(this, this);

        panel.addToolListener(() -> {
            panel.setTool(Tool.TOOL_NOTHING, null);
            cmbPlugin.setModel(EMPTY_MODEL);
            groupDraw.clearSelection();
            buttonSelected = false;
        });
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        int kCode = e.getKeyCode();
        if (kCode == KeyEvent.VK_ESCAPE) {
            panel.cancelDrawing();
            schema.selectElements(-1, -1, 0, 0);
        } else if (kCode == KeyEvent.VK_DELETE) {
            panel.cancelDrawing();
            schema.deleteSelected();
            panel.repaint();
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }


    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groupDraw = new javax.swing.ButtonGroup();
        javax.swing.JToolBar toolDraw = new javax.swing.JToolBar();
        javax.swing.JButton btnSave = new javax.swing.JButton();
        javax.swing.JToolBar.Separator jSeparator4 = new javax.swing.JToolBar.Separator();
        btnCompiler = new javax.swing.JToggleButton();
        btnCPU = new javax.swing.JToggleButton();
        btnRAM = new javax.swing.JToggleButton();
        btnDevice = new javax.swing.JToggleButton();
        javax.swing.JToolBar.Separator jSeparator5 = new javax.swing.JToolBar.Separator();
        btnLine = new javax.swing.JToggleButton();
        btnBidirection = new javax.swing.JToggleButton();
        javax.swing.JToolBar.Separator jSeparator2 = new javax.swing.JToolBar.Separator();
        btnDelete = new javax.swing.JToggleButton();
        javax.swing.JToolBar.Separator jSeparator1 = new javax.swing.JToolBar.Separator();
        cmbPlugin = new javax.swing.JComboBox<>();
        javax.swing.JToolBar.Separator jSeparator3 = new javax.swing.JToolBar.Separator();
        btnUseGrid = new javax.swing.JToggleButton();
        scrollScheme = new javax.swing.JScrollPane();
        sliderGridGap = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Computer editor");
        setIconImages(null);

        toolDraw.setFloatable(false);
        toolDraw.setRollover(true);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/emustudio/application/gui/dialogs/document-save.png"))); // NOI18N
        btnSave.setToolTipText("Save & Close");
        btnSave.setFocusable(false);
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSave.addActionListener(this::btnSaveActionPerformed);
        toolDraw.add(btnSave);
        toolDraw.add(jSeparator4);

        groupDraw.add(btnCompiler);
        btnCompiler.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/emustudio/application/gui/dialogs/compile.png"))); // NOI18N
        btnCompiler.setToolTipText("Set compiler");
        btnCompiler.setFocusable(false);
        btnCompiler.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCompiler.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCompiler.addItemListener(this::btnCompilerItemStateChanged);
        btnCompiler.addActionListener(this::btnCompilerActionPerformed);
        toolDraw.add(btnCompiler);

        groupDraw.add(btnCPU);
        btnCPU.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/emustudio/application/gui/dialogs/cpu.gif"))); // NOI18N
        btnCPU.setToolTipText("Set CPU");
        btnCPU.setFocusable(false);
        btnCPU.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCPU.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCPU.addItemListener(this::btnCPUItemStateChanged);
        btnCPU.addActionListener(this::btnCPUActionPerformed);
        toolDraw.add(btnCPU);

        groupDraw.add(btnRAM);
        btnRAM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/emustudio/application/gui/dialogs/ram.gif"))); // NOI18N
        btnRAM.setToolTipText("Set main store");
        btnRAM.setFocusable(false);
        btnRAM.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRAM.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRAM.addItemListener(this::btnRAMItemStateChanged);
        btnRAM.addActionListener(this::btnRAMActionPerformed);
        toolDraw.add(btnRAM);

        groupDraw.add(btnDevice);
        btnDevice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/emustudio/application/gui/dialogs/device.png"))); // NOI18N
        btnDevice.setToolTipText("Add device");
        btnDevice.setFocusable(false);
        btnDevice.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDevice.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDevice.addItemListener(this::btnDeviceItemStateChanged);
        btnDevice.addActionListener(this::btnDeviceActionPerformed);
        toolDraw.add(btnDevice);
        toolDraw.add(jSeparator5);

        groupDraw.add(btnLine);
        btnLine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/emustudio/application/gui/dialogs/connection.png"))); // NOI18N
        btnLine.setToolTipText("Add connection");
        btnLine.setFocusable(false);
        btnLine.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLine.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLine.addItemListener(this::btnLineItemStateChanged);
        btnLine.addActionListener(this::btnLineActionPerformed);
        toolDraw.add(btnLine);

        btnBidirection.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/emustudio/application/gui/dialogs/bidirection.gif"))); // NOI18N
        btnBidirection.setSelected(true);
        btnBidirection.setToolTipText("Bidirectional connection");
        btnBidirection.setFocusable(false);
        btnBidirection.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnBidirection.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnBidirection.addActionListener(this::btnBidirectionActionPerformed);
        toolDraw.add(btnBidirection);
        toolDraw.add(jSeparator2);

        groupDraw.add(btnDelete);
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/emustudio/application/gui/dialogs/edit-delete.png"))); // NOI18N
        btnDelete.setToolTipText("Delete component or connection");
        btnDelete.setFocusable(false);
        btnDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDelete.addItemListener(this::btnDeleteItemStateChanged);
        btnDelete.addActionListener(this::btnDeleteActionPerformed);
        toolDraw.add(btnDelete);
        toolDraw.add(jSeparator1);

        cmbPlugin.setToolTipText("Select plug-in");
        cmbPlugin.addActionListener(this::cmbPluginActionPerformed);
        toolDraw.add(cmbPlugin);
        toolDraw.add(jSeparator3);

        btnUseGrid.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/emustudio/application/gui/dialogs/grid_memory.gif"))); // NOI18N
        btnUseGrid.setSelected(true);
        btnUseGrid.setToolTipText("Use grid?");
        btnUseGrid.setFocusable(false);
        btnUseGrid.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnUseGrid.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnUseGrid.addActionListener(this::btnUseGridActionPerformed);
        toolDraw.add(btnUseGrid);

        sliderGridGap.setMinimum(5);
        sliderGridGap.setOrientation(javax.swing.JSlider.VERTICAL);
        sliderGridGap.setPaintTicks(true);
        sliderGridGap.setSnapToTicks(true);
        sliderGridGap.setToolTipText("Set grid size");
        sliderGridGap.setValue(30);
        sliderGridGap.addChangeListener(this::sliderGridGapStateChanged);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(toolDraw, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
                            .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(scrollScheme, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(sliderGridGap, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(toolDraw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(sliderGridGap, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                        .addComponent(scrollScheme, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE))
                    .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sliderGridGapStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGridGapStateChanged
        panel.setGridGap(sliderGridGap.getValue());
        schema.setSchemaGridGap(sliderGridGap.getValue());
    }//GEN-LAST:event_sliderGridGapStateChanged

    private void btnCompilerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompilerActionPerformed
        if (checkUnsetDrawingTool()) {
            buttonSelected = true;
            resetComboWithPluginFiles(PLUGIN_TYPE.COMPILER);
        }
    }//GEN-LAST:event_btnCompilerActionPerformed

    private void btnCPUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCPUActionPerformed
        if (checkUnsetDrawingTool()) {
            buttonSelected = true;
            resetComboWithPluginFiles(PLUGIN_TYPE.CPU);
        }
    }//GEN-LAST:event_btnCPUActionPerformed


    private void btnRAMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRAMActionPerformed
        if (checkUnsetDrawingTool()) {
            buttonSelected = true;
            resetComboWithPluginFiles(PLUGIN_TYPE.MEMORY);
        }
    }//GEN-LAST:event_btnRAMActionPerformed

    private void btnDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeviceActionPerformed
        if (checkUnsetDrawingTool()) {
            buttonSelected = true;
            resetComboWithPluginFiles(PLUGIN_TYPE.DEVICE);
        }
    }//GEN-LAST:event_btnDeviceActionPerformed

    private void btnLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLineActionPerformed
        panel.setTool(Tool.TOOL_NOTHING, null);
        cmbPlugin.setModel(EMPTY_MODEL);
        if (buttonSelected) {
            groupDraw.clearSelection();
            return;
        }
        panel.setTool(Tool.TOOL_CONNECTION, null);
        buttonSelected = true;
    }//GEN-LAST:event_btnLineActionPerformed

    private void cmbPluginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPluginActionPerformed
        Optional<String> pluginFile = ((PluginComboModel) cmbPlugin.getModel()).getSelectedFileName();
        pluginFile.ifPresentOrElse(fileName -> {
            if (btnCompiler.isSelected()) {
                panel.setTool(Tool.TOOL_COMPILER, fileName);
            }
            if (btnCPU.isSelected()) {
                panel.setTool(Tool.TOOL_CPU, fileName);
            } else if (btnRAM.isSelected()) {
                panel.setTool(Tool.TOOL_MEMORY, fileName);
            } else if (btnDevice.isSelected()) {
                panel.setTool(Tool.TOOL_DEVICE, fileName);
            }
        }, () -> panel.cancelDrawing());
    }//GEN-LAST:event_cmbPluginActionPerformed

    private void btnCompilerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btnCompilerItemStateChanged
        if (!btnCompiler.isSelected()) {
            buttonSelected = false;
        }
    }//GEN-LAST:event_btnCompilerItemStateChanged

    private void btnCPUItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btnCPUItemStateChanged
        if (!btnCPU.isSelected()) {
            buttonSelected = false;
        }
    }//GEN-LAST:event_btnCPUItemStateChanged

    private void btnRAMItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btnRAMItemStateChanged
        if (!btnRAM.isSelected()) {
            buttonSelected = false;
        }
    }//GEN-LAST:event_btnRAMItemStateChanged

    private void btnDeviceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btnDeviceItemStateChanged
        if (!btnDevice.isSelected()) {
            buttonSelected = false;
        }
    }//GEN-LAST:event_btnDeviceItemStateChanged

    private void btnLineItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btnLineItemStateChanged
        if (!btnLine.isSelected()) {
            buttonSelected = false;
        }
    }//GEN-LAST:event_btnLineItemStateChanged

    private void btnDeleteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btnDeleteItemStateChanged
        if (!btnDelete.isSelected()) {
            buttonSelected = false;
        }
    }//GEN-LAST:event_btnDeleteItemStateChanged

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        panel.setTool(Tool.TOOL_NOTHING, null);
        cmbPlugin.setModel(EMPTY_MODEL);
        if (buttonSelected) {
            groupDraw.clearSelection();
        } else {
            panel.setTool(Tool.TOOL_DELETE, null);
            buttonSelected = true;
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            schema.save();
            odialog.setSelectedComputerConfig(schema.getComputerConfig());
            odialog.update();
        } catch (CannotUpdateSettingException e) {
            LOGGER.error("Could not save computer schema", e);
            dialogs.showError("Could not save computer schema. Please consult log file for details.", "Save schema");
        }
        dispose();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUseGridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUseGridActionPerformed
        panel.setUsingGrid(btnUseGrid.isSelected());
        sliderGridGap.setEnabled(btnUseGrid.isSelected());
        schema.setUseSchemaGrid(btnUseGrid.isSelected());
        schema.setSchemaGridGap(sliderGridGap.getValue());
    }//GEN-LAST:event_btnUseGridActionPerformed


    private void btnBidirectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBidirectionActionPerformed
        panel.setFutureLineDirection(btnBidirection.isSelected());
    }//GEN-LAST:event_btnBidirectionActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnBidirection;
    private javax.swing.JToggleButton btnCPU;
    private javax.swing.JToggleButton btnCompiler;
    private javax.swing.JToggleButton btnDelete;
    private javax.swing.JToggleButton btnDevice;
    private javax.swing.JToggleButton btnLine;
    private javax.swing.JToggleButton btnRAM;
    private javax.swing.JToggleButton btnUseGrid;
    private javax.swing.JComboBox<String> cmbPlugin;
    private javax.swing.ButtonGroup groupDraw;
    private javax.swing.JScrollPane scrollScheme;
    private javax.swing.JSlider sliderGridGap;
    // End of variables declaration//GEN-END:variables


    private void resetComboWithPluginFiles(PLUGIN_TYPE pluginType) {
        try {
            List<String> pluginFiles = configFiles.listPluginFiles(pluginType);
            cmbPlugin.setModel(new PluginComboModel(pluginFiles));
            selectFirstPlugin();
        } catch (IOException e) {
            LOGGER.error("Could not load CPU plugin files", e);
            cmbPlugin.setModel(EMPTY_MODEL);
        }
    }

    private boolean checkUnsetDrawingTool() {
        if (buttonSelected) {
            cmbPlugin.setModel(EMPTY_MODEL);
            groupDraw.clearSelection();
            panel.setTool(Tool.TOOL_NOTHING, null);
            buttonSelected = false;
            return false;
        }
        return true;
    }

    private void selectFirstPlugin() {
        if (cmbPlugin.getItemCount() > 0) {
            cmbPlugin.setSelectedIndex(0);
        }
    }
}
