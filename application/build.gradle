/*
 * This file is part of emuStudio.
 *
 * Copyright (C) 2006-2020  Peter Jakubƒço
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */


import org.apache.tools.ant.filters.ReplaceTokens

import java.text.SimpleDateFormat

plugins {
  id 'application'
}

configurations {
  extraLibs
  extraLibsRuntime
  providedRuntime

  implementation.extendsFrom(extraLibs)
  runtimeOnly.extendsFrom(extraLibsRuntime)
}

dependencies {
  extraLibs libs.emuLib

  implementation libs.jcipAnnotations
  implementation libs.antlrRuntime

  extraLibs libs.editor
  extraLibs libs.editorDialogs
  extraLibs libs.args4j
  extraLibs libs.tomlj
  extraLibs libs.logback
  extraLibs libs.slf4JApi

  extraLibsRuntime libs.javaCupRuntime
  providedRuntime project(":plugins:compiler:as-8080")
  providedRuntime project(":plugins:compiler:as-ssem")
  providedRuntime project(":plugins:compiler:as-z80")
  providedRuntime project(":plugins:compiler:brainc-brainduck")
//  providedRuntime project(":plugins:compiler:ramc-ram")
//  providedRuntime project(":plugins:compiler:raspc-rasp")

//  providedRuntime project(":plugins:memory:ram-mem")
 // providedRuntime project(":plugins:memory:rasp-mem")
  providedRuntime project(":plugins:memory:ssem-mem")
  providedRuntime project(":plugins:memory:byte-mem")

  providedRuntime project(":plugins:cpu:8080-cpu")
  providedRuntime project(":plugins:cpu:brainduck-cpu")
//  providedRuntime project(":plugins:cpu:ram-cpu")
 // providedRuntime project(":plugins:cpu:rasp-cpu")
  providedRuntime project(":plugins:cpu:z80-cpu")
  providedRuntime project(":plugins:cpu:ssem-cpu")

  providedRuntime project(":plugins:device:abstract-tape")
  providedRuntime project(":plugins:device:88-dcdd")
  providedRuntime project(":plugins:device:88-sio")
  providedRuntime project(":plugins:device:adm3A-terminal")
  providedRuntime project(":plugins:device:brainduck-terminal")
  providedRuntime project(":plugins:device:simhPseudo-z80")
  providedRuntime project(":plugins:device:ssem-display")

  testImplementation libs.junit
  testImplementation libs.easyMock
  testImplementation libs.mockito
  testImplementation libs.slf4JSimple
}


application {
  applicationName = 'emuStudio'
  mainClassName = 'net.emustudio.application.Runner'
  applicationDefaultJvmArgs = [
    '-Dawt.useSystemAAFontSettings=on', '-Dswing.aatext=true', '-Dsun.java2d.xrender=true', '-Dsun.java2d.d3d=false',
    '-Dsun.java2d.noddraw=true'
  ]
  executableDir = ''
}

compileJava {
  sourceSets.main.compileClasspath += configurations.providedRuntime
  options.encoding = 'UTF-8'
}
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

run {
  classpath += configurations.providedRuntime
}

jar {
  archivesBaseName = 'emuStudio'
  archiveVersion = ''
  manifest {
    attributes(
      'Main-Class': 'net.emustudio.application.Runner',
      "Implementation-Title": archivesBaseName,
      "Implementation-Version": project.version,
      'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
      'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
      'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    )
  }
}

processResources {
  filesMatching("**/*.properties") {
    filter ReplaceTokens, tokens: [
      "project.version": project.version,
      "today.year": new Date().format("yyyy")
    ]
  }
}

task copyTestResources(type: Copy) {
  from "${projectDir}/src/test/resources"
  into "${buildDir}/classes/java/test/"
}
processTestResources.dependsOn copyTestResources


def output(String name) {
  return project(name).buildDir.getAbsolutePath() + "/libs"
}

def examples(String name) {
  return project(name).buildDir.getAbsolutePath() + "/libs/examples"
}

def scripts(String name) {
  return project(name).buildDir.getAbsolutePath() + "/libs/scripts"
}

distZip {
  archiveVersion = ''
}

distTar {
  archiveVersion = ''
}

startScripts {
  classpath += files('logback.xml') // for logback
  doLast {
    def windowsScriptFile = file getWindowsScript()
    def unixScriptFile = file getUnixScript()
    windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\logback.xml', '.')
    unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/logback.xml', '.')
  }
}

distributions {

  main {
    contents {
      fileMode = null // preserve attributes

      from('src/main/files')

      into('compiler') {
        include '*.jar'
        from(output(":plugins:compiler:as-8080"))
        from(output(":plugins:compiler:as-z80"))
        from(output(":plugins:compiler:as-ssem"))
        from(output(":plugins:compiler:brainc-brainduck"))
      //  from(output(":plugins:compiler:ramc-ram"))
        //from(output(":plugins:compiler:raspc-rasp"))
      }

      into('memory') {
        include '*.jar'
//        from(output(":plugins:memory:ram-mem"))
  //      from(output(":plugins:memory:rasp-mem"))
        from(output(":plugins:memory:ssem-mem"))
        from(output(":plugins:memory:byte-mem"))
      }

      into('cpu') {
        include '*.jar'
        from(output(":plugins:cpu:8080-cpu"))
        from(output(":plugins:cpu:brainduck-cpu"))
      //  from(output(":plugins:cpu:ram-cpu"))
  //      from(output(":plugins:cpu:rasp-cpu"))
        from(output(":plugins:cpu:z80-cpu"))
        from(output(":plugins:cpu:ssem-cpu"))
      }

      into('device') {
        include '*.jar'
        from(output(":plugins:device:abstract-tape"))
        from(output(":plugins:device:88-dcdd"))
        from(output(":plugins:device:88-sio"))
        from(output(":plugins:device:adm3A-terminal"))
        from(output(":plugins:device:brainduck-terminal"))
        from(output(":plugins:device:simhPseudo-z80"))
        from(output(":plugins:device:ssem-display"))
      }

      // Examples
      //["as-8080", "as-z80", "as-ssem", "brainc-brainduck", "ramc-ram", "raspc-rasp"]
      ["as-8080", "as-z80", "as-ssem", "brainc-brainduck"].collect { compiler ->
        from(examples(":plugins:compiler:$compiler")) {
          into "examples/$compiler"
        }
      }

      // Scripts
      // ["as-8080", "as-z80", "as-ssem", "brainc-brainduck", "ramc-ram", "raspc-rasp"]
      ["as-8080", "as-z80", "as-ssem", "brainc-brainduck"].collect { compiler ->
        from(scripts(":plugins:compiler:$compiler")) {
          into "bin"
        }
      }
      ["88-dcdd"].collect { device ->
        from(scripts(":plugins:device:$device")) {
          into "bin"
        }
      }
    }
  }
}
