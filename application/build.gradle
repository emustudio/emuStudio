/*
 * This file is part of emuStudio.
 *
 * Copyright (C) 2006-2020  Peter Jakubƒço
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import java.text.SimpleDateFormat

plugins {
  id 'java'
  id 'distribution'
}

configurations {
  extraLibs
  extraLibsRuntime

  implementation.extendsFrom(extraLibs)
  runtimeOnly.extendsFrom(extraLibsRuntime)
}

dependencies {
  extraLibs libs.emuLib

  implementation libs.jcipAnnotations
  extraLibs libs.args4j
  extraLibs libs.tomlj
  extraLibs libs.logback
  extraLibs libs.slf4JApi

  extraLibsRuntime libs.javaCupRuntime
  runtimeOnly project(":plugins:compilers:as-8080")
  runtimeOnly project(":plugins:compilers:as-ssem")
  runtimeOnly project(":plugins:compilers:as-z80")
  runtimeOnly project(":plugins:compilers:brainc-brainduck")
  runtimeOnly project(":plugins:compilers:ramc-ram")
  runtimeOnly project(":plugins:compilers:raspc-rasp")

  runtimeOnly project(":plugins:mem:ram-mem")
  runtimeOnly project(":plugins:mem:rasp-mem")
  runtimeOnly project(":plugins:mem:brainduck-mem")
  runtimeOnly project(":plugins:mem:ssem-mem")
  runtimeOnly project(":plugins:mem:standard-mem")

  runtimeOnly project(":plugins:cpu:8080-cpu")
  runtimeOnly project(":plugins:cpu:brainduck-cpu")
  runtimeOnly project(":plugins:cpu:ram-cpu")
  runtimeOnly project(":plugins:cpu:rasp-cpu")
  runtimeOnly project(":plugins:cpu:z80-cpu")
  runtimeOnly project(":plugins:cpu:ssem-cpu")

  runtimeOnly project(":plugins:devices:abstractTape-ram")
  runtimeOnly project(":plugins:devices:88-disk")
  runtimeOnly project(":plugins:devices:88-sio")
  runtimeOnly project(":plugins:devices:adm3A-terminal")
  runtimeOnly project(":plugins:devices:brainduck-terminal")
  runtimeOnly project(":plugins:devices:simhPseudo-z80")
  runtimeOnly project(":plugins:devices:ssem-display")


  testImplementation libs.junit
  testImplementation libs.easyMock
  testImplementation libs.mockito
}

jar {
  archivesBaseName = 'emuStudio'
  archiveVersion = ''
  manifest {
    attributes(
      'Main-Class': 'net.emustudio.main.Main',
      'Class-Path': configurations.extraLibs.files.collect { "lib/" + it.getName() }.join(' '),
      "Implementation-Title": project.name,
      "Implementation-Version": project.version,
      'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
      'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
      'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    )
  }
}

def output(String name) {
  return project(name).buildDir.getAbsolutePath() + "/libs"
}

def examples(String name) {
  return project(name).buildDir.getAbsolutePath() + "/libs/examples"
}

def scripts(String name) {
  return project(name).buildDir.getAbsolutePath() + "/libs/scripts"
}

distributions {

  main {
    distributionBaseName = 'emuStudio'
    version = ''

    contents {
      from jar
      from('src/main/files')

      into('lib') {
        from(configurations.extraLibs.collect { i -> i })
        from(configurations.extraLibsRuntime.collect { i -> i })
      }


      into('compilers') {
        include '*.jar'
        from(output(":plugins:compilers:as-8080"))
        from(output(":plugins:compilers:as-z80"))
        from(output(":plugins:compilers:as-ssem"))
        from(output(":plugins:compilers:brainc-brainduck"))
        from(output(":plugins:compilers:ramc-ram"))
        from(output(":plugins:compilers:raspc-rasp"))
      }

      into('mem') {
        from(output(":plugins:mem:ram-mem"))
        from(output(":plugins:mem:rasp-mem"))
        from(output(":plugins:mem:brainduck-mem"))
        from(output(":plugins:mem:ssem-mem"))
        from(output(":plugins:mem:standard-mem"))
      }

      into('cpu') {
        from(output(":plugins:cpu:8080-cpu"))
        from(output(":plugins:cpu:brainduck-cpu"))
        from(output(":plugins:cpu:ram-cpu"))
        from(output(":plugins:cpu:rasp-cpu"))
        from(output(":plugins:cpu:z80-cpu"))
        from(output(":plugins:cpu:ssem-cpu"))
      }

      into('devices') {
        from(output(":plugins:devices:abstractTape-ram"))
        from(output(":plugins:devices:88-disk"))
        from(output(":plugins:devices:88-sio"))
        from(output(":plugins:devices:adm3A-terminal"))
        from(output(":plugins:devices:brainduck-terminal"))
        from(output(":plugins:devices:simhPseudo-z80"))
        from(output(":plugins:devices:ssem-display"))
      }

      // Examples
      ["as-8080", "as-z80", "as-ssem", "brainc-brainduck", "ramc-ram", "raspc-rasp"].collect { compiler ->
        from(examples(":plugins:compilers:$compiler")) {
          into "examples/$compiler"
        }
      }

      // Scripts
      ["as-8080", "as-z80", "as-ssem", "brainc-brainduck", "ramc-ram", "raspc-rasp"].collect { compiler ->
        from(scripts(":plugins:compilers:$compiler")) {
          into "bin"
        }
      }
    }
  }
}


task copyTestResources(type: Copy) {
  from "${projectDir}/src/test/resources"
  into "${buildDir}/classes/java/test/"
}
processTestResources.dependsOn copyTestResources
