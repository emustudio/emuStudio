/*
 * This file is part of emuStudio.
 *
 * Copyright (C) 2006-2022  Peter Jakubƒço
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import java.text.SimpleDateFormat

apply from: 'test_report.gradle'

ext.versions = [
        slf4j: '1.7.30'
]

ext.libs = [
        emuLib           : "net.emustudio:emulib:11.7.0-SNAPSHOT",
        cpuTestSuite     : "net.emustudio:cpu-testsuite_11.6:1.2.0-SNAPSHOT",

        javaCupRuntime   : "com.github.vbmacher:java-cup-runtime:11b-20160615",
        jcipAnnotations  : "net.jcip:jcip-annotations:1.0",
        antlrRuntime     : "org.antlr:antlr4-runtime:4.11.1",

        slf4JApi         : "org.slf4j:slf4j-api:${versions.slf4j}",
        slf4JSimple      : "org.slf4j:slf4j-simple:${versions.slf4j}",
        slf4JNop         : "org.slf4j:slf4j-nop:${versions.slf4j}",
        logback          : "ch.qos.logback:logback-classic:1.2.3",

        picocli          : "info.picocli:picocli:4.7.0",
        picocliAnnotation: "info.picocli:picocli-codegen:4.7.0",

        tomlj            : "com.electronwill.night-config:toml:3.6.5",

        editor           : "com.fifesoft:rsyntaxtextarea:3.1.6",
        editorDialogs    : "com.fifesoft:rstaui:3.1.4",

        junit            : "junit:junit:4.13",
        easyMock         : "org.easymock:easymock:4.2",
        mockito          : "org.mockito:mockito-all:1.10.19"
]

allprojects {
  version = '0.41-SNAPSHOT'

  configurations {
    compilerLib
    memoryLib
    deviceLib
    cpuLib

    implementation.extendsFrom(compilerLib)
    implementation.extendsFrom(memoryLib)
    implementation.extendsFrom(deviceLib)
    implementation.extendsFrom(cpuLib)
  }

  def libClassPath = {
    def libs = configurations.runtimeClasspath.files.collect { "lib/" + it.getName() } +
            configurations.compilerLib.files.collect { "compiler/" + it.getName() } +
            configurations.memoryLib.files.collect { "memory/" + it.getName() } +
            configurations.deviceLib.files.collect { "device/" + it.getName() } +
            configurations.cpuLib.files.collect { "cpu/" + it.getName() }

    return libs.join(' ')
  }

  ext.manifestAttributes = { String mainClass ->
    def baseAttributes = [
            'Class-Path'            : libClassPath(),
            "Implementation-Title"  : project.name,
            "Implementation-Version": project.version,
            'Build-Timestamp'       : new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
            'Build-Jdk'             : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-OS'              : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    ]

    if (mainClass != null && mainClass != '') {
      baseAttributes.put('Main-Class', mainClass)
    }

    return baseAttributes
  }
}

subprojects {
  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
  }
}
