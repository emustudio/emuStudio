/*
 * KISS, YAGNI, DRY
 *
 * (c) Copyright 2006-2017, Peter Jakubƒço
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
package emustudio.gui;

import emulib.runtime.StaticDialogs;
import emustudio.drawing.Element;
import emustudio.main.Main;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.Map;

public class ElementPropertiesDialog extends javax.swing.JDialog {
    private final Element element;
    private final Map<String, String> settings;

    public ElementPropertiesDialog(JDialog parent, Element element) {
        super(parent, true);
        initComponents();
        this.element = element;
        this.settings = element.getPropertiesWithoutSchema();
        setTitle(element.getPluginName() + " settings");
        setLocationRelativeTo(null);
        loadTable();
    }

    private void loadTable() {
        DefaultTableModel model = (DefaultTableModel) tblSettings.getModel();
        model.setRowCount(0);

        for (Map.Entry<String, String> entry : settings.entrySet()) {
            model.addRow(new String[]{entry.getKey(), entry.getValue()});
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        tblSettings = new javax.swing.JTable();
        javax.swing.JButton btnSave = new javax.swing.JButton();
        javax.swing.JButton btnNew = new javax.swing.JButton();
        javax.swing.JButton btnRemove = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Plug-in settings");

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() & ~java.awt.Font.BOLD));
        jLabel1.setText("Manage plug-in settings");

        tblSettings.setAutoCreateRowSorter(true);
        tblSettings.setModel(new javax.swing.table.DefaultTableModel(
            new Object[][]{

            },
            new String[]{
                "Setting name", "Value"
            }
        ) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblSettings);

        btnSave.setFont(btnSave.getFont().deriveFont(btnSave.getFont().getStyle() & ~java.awt.Font.BOLD));
        btnSave.setText("Save");
        btnSave.addActionListener(this::btnSaveActionPerformed);

        btnNew.setFont(btnNew.getFont().deriveFont(btnNew.getFont().getStyle() & ~java.awt.Font.BOLD));
        btnNew.setText("Add new");
        btnNew.addActionListener(this::btnNewActionPerformed);

        btnRemove.setFont(btnRemove.getFont().deriveFont(btnRemove.getFont().getStyle() & ~java.awt.Font.BOLD));
        btnRemove.setText("Remove");
        btnRemove.addActionListener(this::btnRemoveActionPerformed);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(btnNew)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnRemove)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 160, Short.MAX_VALUE)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSave)
                        .addComponent(btnNew)
                        .addComponent(btnRemove))
                    .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblSettings.getModel();
        settings.clear();
        for (int i = 0; i < model.getRowCount(); i++) {
            settings.put((String) model.getValueAt(i, 0), (String) model.getValueAt(i, 1));
        }
        element.refreshSettings(settings);
        dispose();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblSettings.getModel();
        String set = StaticDialogs.inputStringValue("Please enter name of the setting:").trim();
        if (set.equals("")) {
            Main.tryShowErrorMessage("Name of the new setting cannot be empty!");
            return;
        }
        String SET = set.toUpperCase();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (((String) model.getValueAt(i, 0)).toUpperCase().equals(SET)) {
                Main.tryShowErrorMessage("Name of the setting already exists!");
                return;
            }
        }
        model.addRow(new String[]{set, "0"});
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int i = tblSettings.getSelectedRow();
        if (i == -1) {
            Main.tryShowErrorMessage("A setting has to be selected!");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblSettings.getModel();
        model.removeRow(i);
    }//GEN-LAST:event_btnRemoveActionPerformed


    private javax.swing.JTable tblSettings;
    // End of variables declaration//GEN-END:variables
}
